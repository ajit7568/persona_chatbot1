{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\nexport const fetchChatMessages = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/chat/messages`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat messages:', error);\n    throw error;\n  }\n};\nexport const fetchCharacters = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/characters`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching characters:', error);\n    throw error;\n  }\n};\nexport const sendMessage = async message => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, {\n      ...message,\n      user_id: message.user_id || 1 // Default to user_id 1 if not provided\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\nexport const streamMessage = (message, onMessage) => {\n  let retryCount = 0;\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY = 1000;\n  let messageBuffer = '';\n  let lastChunkTime = Date.now();\n  const CHUNK_TIMEOUT = 10000; // 10 seconds timeout between chunks\n\n  const connect = () => {\n    const params = new URLSearchParams({\n      message: message.message,\n      user_id: (message.user_id || 1).toString(),\n      ...(message.character_id && {\n        character_id: message.character_id.toString()\n      })\n    });\n    const eventSource = new EventSource(`${API_URL}/chat?${params}`);\n    eventSource.onmessage = event => {\n      try {\n        var _data$text;\n        const data = JSON.parse(event.data);\n        lastChunkTime = Date.now();\n        if (data.error) {\n          eventSource.close();\n          onMessage({\n            text: '',\n            done: true,\n            error: data.error\n          });\n          return;\n        }\n\n        // Only process text if it exists and isn't empty\n        if ((_data$text = data.text) !== null && _data$text !== void 0 && _data$text.trim()) {\n          messageBuffer += data.text;\n          onMessage({\n            text: data.text,\n            done: false\n          });\n        }\n        if (data.done) {\n          eventSource.close();\n          // Send final message if there's any buffered content\n          if (messageBuffer.trim()) {\n            onMessage({\n              text: '',\n              // Empty text since we've already sent the content\n              done: true\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n        eventSource.close();\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Failed to parse response'\n        });\n      }\n    };\n    eventSource.onerror = async error => {\n      const currentTime = Date.now();\n      console.error('EventSource error:', error);\n      eventSource.close();\n\n      // Check if we've exceeded the chunk timeout\n      if (currentTime - lastChunkTime > CHUNK_TIMEOUT) {\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Response timeout. Please try again.'\n        });\n        return;\n      }\n      if (retryCount < MAX_RETRIES) {\n        retryCount++;\n        console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        connect();\n      } else {\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Connection failed after multiple attempts. Please try again.'\n        });\n      }\n    };\n    return () => {\n      eventSource.close();\n    };\n  };\n  return connect();\n};","map":{"version":3,"names":["axios","API_URL","fetchChatMessages","response","get","data","error","console","fetchCharacters","sendMessage","message","post","user_id","streamMessage","onMessage","retryCount","MAX_RETRIES","RETRY_DELAY","messageBuffer","lastChunkTime","Date","now","CHUNK_TIMEOUT","connect","params","URLSearchParams","toString","character_id","eventSource","EventSource","onmessage","event","_data$text","JSON","parse","close","text","done","trim","onerror","currentTime","log","Promise","resolve","setTimeout"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000';\n\ninterface ChatMessage {\n    message: string;\n    character_id?: number;\n    user_id: number;  // Added user_id as required\n}\n\ninterface ChatResponse {\n    response: string;\n}\n\ninterface Character {\n    id: number;\n    name: string;\n    movie: string;\n    chat_style: string;\n    example_responses: string[];\n}\n\nexport interface StreamResponse {\n    text: string;\n    done: boolean;\n    error?: string;\n}\n\nexport const fetchChatMessages = async () => {\n    try {\n        const response = await axios.get(`${API_URL}/chat/messages`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat messages:', error);\n        throw error;\n    }\n};\n\nexport const fetchCharacters = async (): Promise<Character[]> => {\n    try {\n        const response = await axios.get(`${API_URL}/characters`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching characters:', error);\n        throw error;\n    }\n};\n\nexport const sendMessage = async (message: ChatMessage): Promise<ChatResponse> => {\n    try {\n        const response = await axios.post(`${API_URL}/chat`, {\n            ...message,\n            user_id: message.user_id || 1  // Default to user_id 1 if not provided\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error sending message:', error);\n        throw error;\n    }\n};\n\nexport const streamMessage = (message: ChatMessage, onMessage: (data: StreamResponse) => void) => {\n    let retryCount = 0;\n    const MAX_RETRIES = 3;\n    const RETRY_DELAY = 1000;\n    let messageBuffer = '';\n    let lastChunkTime = Date.now();\n    const CHUNK_TIMEOUT = 10000; // 10 seconds timeout between chunks\n\n    const connect = () => {\n        const params = new URLSearchParams({\n            message: message.message,\n            user_id: (message.user_id || 1).toString(),\n            ...(message.character_id && { character_id: message.character_id.toString() })\n        });\n\n        const eventSource = new EventSource(`${API_URL}/chat?${params}`);\n\n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data) as StreamResponse;\n                lastChunkTime = Date.now();\n                \n                if (data.error) {\n                    eventSource.close();\n                    onMessage({ text: '', done: true, error: data.error });\n                    return;\n                }\n\n                // Only process text if it exists and isn't empty\n                if (data.text?.trim()) {\n                    messageBuffer += data.text;\n                    onMessage({ \n                        text: data.text,\n                        done: false \n                    });\n                }\n                \n                if (data.done) {\n                    eventSource.close();\n                    // Send final message if there's any buffered content\n                    if (messageBuffer.trim()) {\n                        onMessage({ \n                            text: '', // Empty text since we've already sent the content\n                            done: true \n                        });\n                    }\n                }\n            } catch (error) {\n                console.error('Error parsing message:', error);\n                eventSource.close();\n                onMessage({ text: '', done: true, error: 'Failed to parse response' });\n            }\n        };\n\n        eventSource.onerror = async (error) => {\n            const currentTime = Date.now();\n            console.error('EventSource error:', error);\n            eventSource.close();\n            \n            // Check if we've exceeded the chunk timeout\n            if (currentTime - lastChunkTime > CHUNK_TIMEOUT) {\n                onMessage({ \n                    text: '', \n                    done: true, \n                    error: 'Response timeout. Please try again.' \n                });\n                return;\n            }\n            \n            if (retryCount < MAX_RETRIES) {\n                retryCount++;\n                console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n                connect();\n            } else {\n                onMessage({ \n                    text: '', \n                    done: true, \n                    error: 'Connection failed after multiple attempts. Please try again.' \n                });\n            }\n        };\n\n        return () => {\n            eventSource.close();\n        };\n    };\n\n    return connect();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}