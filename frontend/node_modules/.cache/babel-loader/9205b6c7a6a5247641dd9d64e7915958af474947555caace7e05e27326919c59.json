{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_URL\n});\n// Add response interceptor for handling auth errors\naxiosInstance.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and we haven't tried to refresh token yet\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (!refreshToken) {\n        throw new Error('No refresh token');\n      }\n      const response = await axios.post(`${API_URL}/auth/refresh`, {\n        refresh_token: refreshToken\n      });\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        const expiryTime = new Date().getTime() + 30 * 60 * 1000;\n        localStorage.setItem('token_expiry', expiryTime.toString());\n\n        // Update Authorization header and retry request\n        originalRequest.headers['Authorization'] = `Bearer ${response.data.access_token}`;\n        return axiosInstance(originalRequest);\n      }\n    } catch (refreshError) {\n      logout();\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const register = async (email, password) => {\n  const response = await axiosInstance.post('/auth/register', {\n    email,\n    password\n  });\n  return response.data;\n};\nexport const login = async (email, password) => {\n  const response = await axiosInstance.post('/auth/login', {\n    email,\n    password\n  });\n  if (response.data.access_token) {\n    localStorage.setItem('token', response.data.access_token);\n    if (response.data.refresh_token) {\n      localStorage.setItem('refresh_token', response.data.refresh_token);\n    }\n    // Store expiry time (30 minutes from now)\n    const expiryTime = new Date().getTime() + 30 * 60 * 1000;\n    localStorage.setItem('token_expiry', expiryTime.toString());\n  }\n  return response.data;\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('refresh_token');\n  localStorage.removeItem('token_expiry');\n  window.location.href = '/login';\n};\nexport const isTokenExpired = () => {\n  const expiryTime = localStorage.getItem('token_expiry');\n  if (!expiryTime) return true;\n  return new Date().getTime() > parseInt(expiryTime);\n};\nexport const getToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token || isTokenExpired()) {\n    logout();\n    return null;\n  }\n  return token;\n};\nexport const getCurrentUser = async () => {\n  const token = getToken();\n  if (!token) return null;\n  try {\n    const response = await axiosInstance.get('/auth/me', {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    if (axios.isAxiosError(error) && ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n      logout();\n    }\n    return null;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","refreshToken","localStorage","getItem","Error","post","refresh_token","data","access_token","setItem","expiryTime","Date","getTime","toString","headers","refreshError","logout","Promise","reject","register","email","password","login","removeItem","window","location","href","isTokenExpired","parseInt","getToken","token","getCurrentUser","get","_error$response2","isAxiosError"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/services/auth.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n    baseURL: API_URL,\n});\n\nexport interface AuthResponse {\n    access_token: string;\n    token_type: string;\n    refresh_token?: string;\n}\n\nexport interface User {\n    id: number;\n    email: string;\n    username: string;\n}\n\n// Add response interceptor for handling auth errors\naxiosInstance.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n        \n        // If error is 401 and we haven't tried to refresh token yet\n        if (error.response?.status === 401 && !originalRequest._retry) {\n            originalRequest._retry = true;\n            \n            try {\n                const refreshToken = localStorage.getItem('refresh_token');\n                if (!refreshToken) {\n                    throw new Error('No refresh token');\n                }\n                \n                const response = await axios.post(`${API_URL}/auth/refresh`, {\n                    refresh_token: refreshToken\n                });\n                \n                if (response.data.access_token) {\n                    localStorage.setItem('token', response.data.access_token);\n                    const expiryTime = new Date().getTime() + 30 * 60 * 1000;\n                    localStorage.setItem('token_expiry', expiryTime.toString());\n                    \n                    // Update Authorization header and retry request\n                    originalRequest.headers['Authorization'] = `Bearer ${response.data.access_token}`;\n                    return axiosInstance(originalRequest);\n                }\n            } catch (refreshError) {\n                logout();\n                return Promise.reject(refreshError);\n            }\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport const register = async (email: string, password: string): Promise<User> => {\n    const response = await axiosInstance.post('/auth/register', {\n        email,\n        password,\n    });\n    return response.data;\n};\n\nexport const login = async (email: string, password: string): Promise<AuthResponse> => {\n    const response = await axiosInstance.post('/auth/login', {\n        email,\n        password,\n    });\n    \n    if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        if (response.data.refresh_token) {\n            localStorage.setItem('refresh_token', response.data.refresh_token);\n        }\n        // Store expiry time (30 minutes from now)\n        const expiryTime = new Date().getTime() + 30 * 60 * 1000;\n        localStorage.setItem('token_expiry', expiryTime.toString());\n    }\n    \n    return response.data;\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('token_expiry');\n    window.location.href = '/login';\n};\n\nexport const isTokenExpired = (): boolean => {\n    const expiryTime = localStorage.getItem('token_expiry');\n    if (!expiryTime) return true;\n    \n    return new Date().getTime() > parseInt(expiryTime);\n};\n\nexport const getToken = (): string | null => {\n    const token = localStorage.getItem('token');\n    if (!token || isTokenExpired()) {\n        logout();\n        return null;\n    }\n    return token;\n};\n\nexport const getCurrentUser = async (): Promise<User | null> => {\n    const token = getToken();\n    if (!token) return null;\n    \n    try {\n        const response = await axiosInstance.get('/auth/me', {\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        if (axios.isAxiosError(error) && error.response?.status === 401) {\n            logout();\n        }\n        return null;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}