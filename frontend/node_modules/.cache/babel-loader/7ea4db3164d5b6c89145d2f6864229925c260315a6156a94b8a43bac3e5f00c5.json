{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nexport const useSpeech = ({\n  onSpeechResult,\n  onSpeechStart,\n  onSpeechEnd\n} = {}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [speechError, setSpeechError] = useState(null);\n\n  // Initialize speech recognition\n  const recognition = useCallback(() => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      return recognition;\n    }\n    return null;\n  }, []);\n\n  // Initialize speech synthesis\n  const synth = typeof window !== 'undefined' ? window.speechSynthesis : null;\n  const startListening = useCallback(() => {\n    const recognitionInstance = recognition();\n    if (!recognitionInstance) {\n      setSpeechError('Speech recognition is not supported in your browser');\n      return;\n    }\n    try {\n      setIsListening(true);\n      setSpeechError(null);\n      onSpeechStart === null || onSpeechStart === void 0 ? void 0 : onSpeechStart();\n      recognitionInstance.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        onSpeechResult === null || onSpeechResult === void 0 ? void 0 : onSpeechResult(transcript);\n      };\n      recognitionInstance.onerror = event => {\n        setSpeechError(event.error);\n        setIsListening(false);\n      };\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n        onSpeechEnd === null || onSpeechEnd === void 0 ? void 0 : onSpeechEnd();\n      };\n      recognitionInstance.start();\n    } catch (error) {\n      setSpeechError('Error starting speech recognition');\n      setIsListening(false);\n    }\n  }, [recognition, onSpeechResult, onSpeechStart, onSpeechEnd]);\n  const stopListening = useCallback(() => {\n    const recognitionInstance = recognition();\n    if (recognitionInstance) {\n      recognitionInstance.stop();\n      setIsListening(false);\n    }\n  }, [recognition]);\n  const speak = useCallback(text => {\n    if (!synth) {\n      setSpeechError('Speech synthesis is not supported in your browser');\n      return;\n    }\n\n    // Cancel any ongoing speech\n    synth.cancel();\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = 1.0;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n    utterance.onstart = () => setIsSpeaking(true);\n    utterance.onend = () => setIsSpeaking(false);\n    utterance.onerror = () => {\n      setIsSpeaking(false);\n      setSpeechError('Error during speech synthesis');\n    };\n    synth.speak(utterance);\n  }, [synth]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (synth) {\n        synth.cancel();\n      }\n      const recognitionInstance = recognition();\n      if (recognitionInstance) {\n        recognitionInstance.abort();\n      }\n    };\n  }, [recognition, synth]);\n  return {\n    startListening,\n    stopListening,\n    speak,\n    isListening,\n    isSpeaking,\n    error: speechError\n  };\n};\n_s(useSpeech, \"hjPtdUjUNr9g2k8bOYd82GaAbSk=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useSpeech","onSpeechResult","onSpeechStart","onSpeechEnd","_s","isListening","setIsListening","isSpeaking","setIsSpeaking","speechError","setSpeechError","recognition","window","webkitSpeechRecognition","continuous","interimResults","lang","synth","speechSynthesis","startListening","recognitionInstance","onresult","event","transcript","results","onerror","error","onend","start","stopListening","stop","speak","text","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onstart","abort"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/hooks/useSpeech.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\n\r\ninterface UseSpeechProps {\r\n    onSpeechResult?: (text: string) => void;\r\n    onSpeechStart?: () => void;\r\n    onSpeechEnd?: () => void;\r\n}\r\n\r\nexport const useSpeech = ({ onSpeechResult, onSpeechStart, onSpeechEnd }: UseSpeechProps = {}) => {\r\n    const [isListening, setIsListening] = useState(false);\r\n    const [isSpeaking, setIsSpeaking] = useState(false);\r\n    const [speechError, setSpeechError] = useState<string | null>(null);\r\n\r\n    // Initialize speech recognition\r\n    const recognition = useCallback(() => {\r\n        if ('webkitSpeechRecognition' in window) {\r\n            const recognition = new (window as any).webkitSpeechRecognition();\r\n            recognition.continuous = false;\r\n            recognition.interimResults = false;\r\n            recognition.lang = 'en-US';\r\n            return recognition;\r\n        }\r\n        return null;\r\n    }, []);\r\n\r\n    // Initialize speech synthesis\r\n    const synth = typeof window !== 'undefined' ? window.speechSynthesis : null;\r\n\r\n    const startListening = useCallback(() => {\r\n        const recognitionInstance = recognition();\r\n        if (!recognitionInstance) {\r\n            setSpeechError('Speech recognition is not supported in your browser');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setIsListening(true);\r\n            setSpeechError(null);\r\n            onSpeechStart?.();\r\n\r\n            recognitionInstance.onresult = (event: any) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                onSpeechResult?.(transcript);\r\n            };\r\n\r\n            recognitionInstance.onerror = (event: any) => {\r\n                setSpeechError(event.error);\r\n                setIsListening(false);\r\n            };\r\n\r\n            recognitionInstance.onend = () => {\r\n                setIsListening(false);\r\n                onSpeechEnd?.();\r\n            };\r\n\r\n            recognitionInstance.start();\r\n        } catch (error) {\r\n            setSpeechError('Error starting speech recognition');\r\n            setIsListening(false);\r\n        }\r\n    }, [recognition, onSpeechResult, onSpeechStart, onSpeechEnd]);\r\n\r\n    const stopListening = useCallback(() => {\r\n        const recognitionInstance = recognition();\r\n        if (recognitionInstance) {\r\n            recognitionInstance.stop();\r\n            setIsListening(false);\r\n        }\r\n    }, [recognition]);\r\n\r\n    const speak = useCallback((text: string) => {\r\n        if (!synth) {\r\n            setSpeechError('Speech synthesis is not supported in your browser');\r\n            return;\r\n        }\r\n\r\n        // Cancel any ongoing speech\r\n        synth.cancel();\r\n\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.rate = 1.0;\r\n        utterance.pitch = 1.0;\r\n        utterance.volume = 1.0;\r\n        \r\n        utterance.onstart = () => setIsSpeaking(true);\r\n        utterance.onend = () => setIsSpeaking(false);\r\n        utterance.onerror = () => {\r\n            setIsSpeaking(false);\r\n            setSpeechError('Error during speech synthesis');\r\n        };\r\n\r\n        synth.speak(utterance);\r\n    }, [synth]);\r\n\r\n    // Cleanup on unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            if (synth) {\r\n                synth.cancel();\r\n            }\r\n            const recognitionInstance = recognition();\r\n            if (recognitionInstance) {\r\n                recognitionInstance.abort();\r\n            }\r\n        };\r\n    }, [recognition, synth]);\r\n\r\n    return {\r\n        startListening,\r\n        stopListening,\r\n        speak,\r\n        isListening,\r\n        isSpeaking,\r\n        error: speechError,\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}