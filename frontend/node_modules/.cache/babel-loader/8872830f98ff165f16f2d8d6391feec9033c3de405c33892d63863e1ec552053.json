{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429) {\n    return Promise.reject(new Error('Too many requests. Please try again later.'));\n  }\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 500) {\n    return Promise.reject(new Error('Server error. Please try again later.'));\n  }\n  if (!error.response) {\n    return Promise.reject(new Error('Network error. Please check your connection.'));\n  }\n  return Promise.reject(error);\n});\nexport const fetchCharacters = async () => {\n  try {\n    const response = await api.get('/characters');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching characters:', error);\n    throw error;\n  }\n};\nexport const sendMessage = async message => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout\n\n    const response = await api.post('/chat', message, {\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      if (error.code === 'ECONNABORTED' || error.name === 'AbortError') {\n        throw new Error('Request timed out. Please try again.');\n      }\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","timeout","headers","interceptors","response","use","error","_error$response","_error$response2","status","Promise","reject","Error","fetchCharacters","get","data","console","sendMessage","message","controller","AbortController","timeoutId","setTimeout","abort","post","signal","clearTimeout","isAxiosError","code","name"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000';\n\ninterface ChatMessage {\n    message: string;\n    character_id?: number;\n}\n\ninterface ChatResponse {\n    response: string;\n}\n\ninterface Character {\n    id: number;\n    name: string;\n    movie: string;\n    chat_style: string;\n    example_responses: string[];\n}\n\n// Create axios instance with default config\nconst api = axios.create({\n    baseURL: API_URL,\n    timeout: 15000,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n    response => response,\n    error => {\n        if (error.response?.status === 429) {\n            return Promise.reject(new Error('Too many requests. Please try again later.'));\n        }\n        if (error.response?.status === 500) {\n            return Promise.reject(new Error('Server error. Please try again later.'));\n        }\n        if (!error.response) {\n            return Promise.reject(new Error('Network error. Please check your connection.'));\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport const fetchCharacters = async (): Promise<Character[]> => {\n    try {\n        const response = await api.get<Character[]>('/characters');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching characters:', error);\n        throw error;\n    }\n};\n\nexport const sendMessage = async (message: ChatMessage): Promise<ChatResponse> => {\n    try {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout\n\n        const response = await api.post<ChatResponse>('/chat', message, {\n            signal: controller.signal\n        });\n\n        clearTimeout(timeoutId);\n        return response.data;\n    } catch (error) {\n        if (axios.isAxiosError(error)) {\n            if (error.code === 'ECONNABORTED' || error.name === 'AbortError') {\n                throw new Error('Request timed out. Please try again.');\n            }\n        }\n        throw error;\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAmBvC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CACzBD,QAAQ,IAAIA,QAAQ,EACpBE,KAAK,IAAI;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EACL,IAAI,EAAAD,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;IAChC,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,4CAA4C,CAAC,CAAC;EAClF;EACA,IAAI,EAAAJ,gBAAA,GAAAF,KAAK,CAACF,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAChC,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,uCAAuC,CAAC,CAAC;EAC7E;EACA,IAAI,CAACN,KAAK,CAACF,QAAQ,EAAE;IACjB,OAAOM,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,8CAA8C,CAAC,CAAC;EACpF;EACA,OAAOF,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,OAAO,MAAMO,eAAe,GAAG,MAAAA,CAAA,KAAkC;EAC7D,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMN,GAAG,CAACgB,GAAG,CAAc,aAAa,CAAC;IAC1D,OAAOV,QAAQ,CAACW,IAAI;EACxB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZU,OAAO,CAACV,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMW,WAAW,GAAG,MAAOC,OAAoB,IAA4B;EAC9E,IAAI;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAE/D,MAAMnB,QAAQ,GAAG,MAAMN,GAAG,CAAC0B,IAAI,CAAe,OAAO,EAAEN,OAAO,EAAE;MAC5DO,MAAM,EAAEN,UAAU,CAACM;IACvB,CAAC,CAAC;IAEFC,YAAY,CAACL,SAAS,CAAC;IACvB,OAAOjB,QAAQ,CAACW,IAAI;EACxB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZ,IAAIV,KAAK,CAAC+B,YAAY,CAACrB,KAAK,CAAC,EAAE;MAC3B,IAAIA,KAAK,CAACsB,IAAI,KAAK,cAAc,IAAItB,KAAK,CAACuB,IAAI,KAAK,YAAY,EAAE;QAC9D,MAAM,IAAIjB,KAAK,CAAC,sCAAsC,CAAC;MAC3D;IACJ;IACA,MAAMN,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}