{"ast":null,"code":"import axios from 'axios';\nimport { getAuthHeaders, getCurrentUser } from './auth';\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const fetchChatSessions = async (characterId, limit = 50, offset = 0) => {\n  const user = getCurrentUser();\n  if (!user) throw new Error('User not authenticated');\n  try {\n    let url = `${API_URL}/messages/me?limit=${limit}&offset=${offset}`;\n    if (characterId) {\n      url += `&character_id=${characterId}`;\n    }\n    const response = await axios.get(url, {\n      headers: getAuthHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat sessions:', error);\n    throw error;\n  }\n};\nexport const fetchChatMessages = async chatSession => {\n  const user = getCurrentUser();\n  if (!user) throw new Error('User not authenticated');\n  try {\n    const response = await axios.get(`${API_URL}/messages/chat/${chatSession}`, {\n      headers: getAuthHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat messages:', error);\n    throw error;\n  }\n};\n\n// Helper function to group messages by chat session\nexport const groupMessagesByChat = messages => {\n  const groupedMessages = messages.reduce((acc, message) => {\n    const key = message.chat_id || message.id.toString();\n    if (!acc[key]) {\n      acc[key] = {\n        id: key,\n        messages: [],\n        timestamp: message.timestamp\n      };\n    }\n    acc[key].messages.push(message);\n    return acc;\n  }, {});\n  return Object.values(groupedMessages).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n};\nexport const fetchCharacters = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/characters`, {\n      headers: getAuthHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching characters:', error);\n    throw error;\n  }\n};\nexport const sendMessage = async message => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, message, {\n      headers: getAuthHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\nexport const streamMessage = async (message, onMessage) => {\n  const user = getCurrentUser();\n  if (!user) throw new Error('User not authenticated');\n  let retryCount = 0;\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY = 1000;\n  let messageBuffer = '';\n  let lastChunkTime = Date.now();\n  const CHUNK_TIMEOUT = 10000;\n  const connect = () => {\n    const params = new URLSearchParams({\n      message: message.message,\n      ...(message.character_id && {\n        character_id: message.character_id.toString()\n      }),\n      ...(message.chat_session && {\n        chat_session: message.chat_session\n      })\n    });\n    const eventSource = new EventSource(`${API_URL}/chat?${params}`, {\n      withCredentials: true\n    });\n    eventSource.onmessage = event => {\n      try {\n        var _data$text;\n        const data = JSON.parse(event.data);\n        lastChunkTime = Date.now();\n        if (data.error) {\n          console.error('Stream error:', data.error);\n          eventSource.close();\n          onMessage({\n            text: '',\n            done: true,\n            error: data.error\n          });\n          return;\n        }\n        if ((_data$text = data.text) !== null && _data$text !== void 0 && _data$text.trim()) {\n          messageBuffer += data.text;\n          onMessage({\n            ...data,\n            chat_session: data.chat_session\n          });\n        }\n        if (data.done) {\n          eventSource.close();\n          if (messageBuffer.trim()) {\n            onMessage({\n              text: '',\n              done: true,\n              chat_session: data.chat_session\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n        eventSource.close();\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Failed to parse response'\n        });\n      }\n    };\n    eventSource.onerror = async error => {\n      const currentTime = Date.now();\n      console.error('EventSource error:', error);\n      eventSource.close();\n      if (currentTime - lastChunkTime > CHUNK_TIMEOUT) {\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Response timeout. Please try again.'\n        });\n        return;\n      }\n      if (retryCount < MAX_RETRIES) {\n        retryCount++;\n        console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        connect();\n      } else {\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Connection failed after multiple attempts.'\n        });\n      }\n    };\n    return () => {\n      eventSource.close();\n    };\n  };\n  return connect();\n};\nexport const createCharacter = async character => {\n  try {\n    const response = await axios.post(`${API_URL}/characters`, character, {\n      headers: getAuthHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating character:', error);\n    throw error;\n  }\n};\nexport const updateCharacter = async (id, character) => {\n  try {\n    const response = await axios.put(`${API_URL}/characters/${id}`, character, {\n      headers: getAuthHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating character:', error);\n    throw error;\n  }\n};\nexport const deleteCharacter = async id => {\n  try {\n    await axios.delete(`${API_URL}/characters/${id}`, {\n      headers: getAuthHeaders()\n    });\n  } catch (error) {\n    console.error('Error deleting character:', error);\n    throw error;\n  }\n};\nexport const getCharacters = async () => {\n  const response = await fetch(`${API_URL}/characters`, {\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) throw new Error('Failed to fetch characters');\n  return response.json();\n};\nexport const selectCharacter = async characterId => {\n  const response = await fetch(`${API_URL}/characters/${characterId}/select`, {\n    method: 'POST',\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) throw new Error('Failed to select character');\n};\nexport const fetchChatHistory = async (characterId, limit = 50, offset = 0) => {\n  const user = getCurrentUser();\n  if (!user) throw new Error('User not authenticated');\n  try {\n    let url = `${API_URL}/messages/me?limit=${limit}&offset=${offset}`;\n    if (characterId) {\n      url += `&character_id=${characterId}`;\n    }\n    const response = await axios.get(url, {\n      headers: getAuthHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getAuthHeaders","getCurrentUser","API_URL","process","env","REACT_APP_API_URL","fetchChatSessions","characterId","limit","offset","user","Error","url","response","get","headers","data","error","console","fetchChatMessages","chatSession","groupMessagesByChat","messages","groupedMessages","reduce","acc","message","key","chat_id","id","toString","timestamp","push","Object","values","sort","a","b","Date","getTime","fetchCharacters","sendMessage","post","streamMessage","onMessage","retryCount","MAX_RETRIES","RETRY_DELAY","messageBuffer","lastChunkTime","now","CHUNK_TIMEOUT","connect","params","URLSearchParams","character_id","chat_session","eventSource","EventSource","withCredentials","onmessage","event","_data$text","JSON","parse","close","text","done","trim","onerror","currentTime","log","Promise","resolve","setTimeout","createCharacter","character","updateCharacter","put","deleteCharacter","delete","getCharacters","fetch","ok","json","selectCharacter","method","fetchChatHistory"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { getAuthHeaders, getCurrentUser } from './auth';\n\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport interface ChatMessage {\n    message: string;\n    character_id?: number;\n    chat_session?: string;\n    timestamp: string;\n}\n\nexport interface ChatResponse {\n    response: string;\n}\n\nexport interface Character {\n    id: number;\n    name: string;\n    movie: string;\n    chat_style: string;\n    example_responses: string[];\n    created_at: string;\n    updated_at?: string;\n}\n\nexport interface StreamResponse {\n    text?: string;\n    done: boolean;\n    error?: string;\n    chat_session?: string;\n}\n\nexport interface ChatHistoryMessage {\n    id: number;\n    message: string;\n    user_id: number;\n    character_id?: number;\n    is_bot: boolean;\n    timestamp: string;\n    last_message?: string;\n    chat_id?: string;\n}\n\nexport interface GroupedChatMessage {\n    id: string;\n    messages: ChatHistoryMessage[];\n    timestamp: string;\n    character?: Character;\n}\n\nexport interface ChatSession {\n    chat_session: string;\n    title: string;\n    last_message: string;\n    timestamp: string;\n    character_id: number | null;\n    character_name: string | null;\n    message_count: number;\n}\n\nexport const fetchChatSessions = async (\n    characterId?: number,\n    limit: number = 50,\n    offset: number = 0\n): Promise<ChatSession[]> => {\n    const user = getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n\n    try {\n        let url = `${API_URL}/messages/me?limit=${limit}&offset=${offset}`;\n        if (characterId) {\n            url += `&character_id=${characterId}`;\n        }\n        const response = await axios.get(url, { headers: getAuthHeaders() });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat sessions:', error);\n        throw error;\n    }\n};\n\nexport const fetchChatMessages = async (chatSession: string): Promise<ChatHistoryMessage[]> => {\n    const user = getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n    \n    try {\n        const response = await axios.get(\n            `${API_URL}/messages/chat/${chatSession}`,\n            { headers: getAuthHeaders() }\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat messages:', error);\n        throw error;\n    }\n};\n\n// Helper function to group messages by chat session\nexport const groupMessagesByChat = (messages: ChatHistoryMessage[]): GroupedChatMessage[] => {\n    const groupedMessages = messages.reduce((acc, message) => {\n        const key = message.chat_id || message.id.toString();\n        if (!acc[key]) {\n            acc[key] = {\n                id: key,\n                messages: [],\n                timestamp: message.timestamp,\n            };\n        }\n        acc[key].messages.push(message);\n        return acc;\n    }, {} as Record<string, GroupedChatMessage>);\n\n    return Object.values(groupedMessages).sort(\n        (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n};\n\nexport const fetchCharacters = async (): Promise<Character[]> => {\n    try {\n        const response = await axios.get(`${API_URL}/characters`, {\n            headers: getAuthHeaders()\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching characters:', error);\n        throw error;\n    }\n};\n\nexport const sendMessage = async (message: ChatMessage): Promise<ChatResponse> => {\n    try {\n        const response = await axios.post(`${API_URL}/chat`, message, {\n            headers: getAuthHeaders()\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error sending message:', error);\n        throw error;\n    }\n};\n\nexport const streamMessage = async (\n    message: ChatMessage,\n    onMessage: (data: StreamResponse) => void\n) => {\n    const user = getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n\n    let retryCount = 0;\n    const MAX_RETRIES = 3;\n    const RETRY_DELAY = 1000;\n    let messageBuffer = '';\n    let lastChunkTime = Date.now();\n    const CHUNK_TIMEOUT = 10000;\n\n    const connect = () => {\n        const params = new URLSearchParams({\n            message: message.message,\n            ...(message.character_id && { character_id: message.character_id.toString() }),\n            ...(message.chat_session && { chat_session: message.chat_session })\n        });\n\n        const eventSource = new EventSource(\n            `${API_URL}/chat?${params}`,\n            { withCredentials: true }\n        );\n\n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data) as StreamResponse;\n                lastChunkTime = Date.now();\n                \n                if (data.error) {\n                    console.error('Stream error:', data.error);\n                    eventSource.close();\n                    onMessage({ text: '', done: true, error: data.error });\n                    return;\n                }\n\n                if (data.text?.trim()) {\n                    messageBuffer += data.text;\n                    onMessage({ ...data, chat_session: data.chat_session });\n                }\n                \n                if (data.done) {\n                    eventSource.close();\n                    if (messageBuffer.trim()) {\n                        onMessage({ text: '', done: true, chat_session: data.chat_session });\n                    }\n                }\n            } catch (error) {\n                console.error('Error parsing message:', error);\n                eventSource.close();\n                onMessage({ text: '', done: true, error: 'Failed to parse response' });\n            }\n        };\n\n        eventSource.onerror = async (error) => {\n            const currentTime = Date.now();\n            console.error('EventSource error:', error);\n            eventSource.close();\n            \n            if (currentTime - lastChunkTime > CHUNK_TIMEOUT) {\n                onMessage({ text: '', done: true, error: 'Response timeout. Please try again.' });\n                return;\n            }\n            \n            if (retryCount < MAX_RETRIES) {\n                retryCount++;\n                console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n                connect();\n            } else {\n                onMessage({ text: '', done: true, error: 'Connection failed after multiple attempts.' });\n            }\n        };\n\n        return () => {\n            eventSource.close();\n        };\n    };\n\n    return connect();\n};\n\nexport const createCharacter = async (character: Omit<Character, 'id' | 'created_at' | 'updated_at'>): Promise<Character> => {\n    try {\n        const response = await axios.post(\n            `${API_URL}/characters`,\n            character,\n            { headers: getAuthHeaders() }\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error creating character:', error);\n        throw error;\n    }\n};\n\nexport const updateCharacter = async (id: number, character: Partial<Character>): Promise<Character> => {\n    try {\n        const response = await axios.put(\n            `${API_URL}/characters/${id}`,\n            character,\n            { headers: getAuthHeaders() }\n        );\n        return response.data;\n    } catch (error) {\n        console.error('Error updating character:', error);\n        throw error;\n    }\n};\n\nexport const deleteCharacter = async (id: number): Promise<void> => {\n    try {\n        await axios.delete(\n            `${API_URL}/characters/${id}`,\n            { headers: getAuthHeaders() }\n        );\n    } catch (error) {\n        console.error('Error deleting character:', error);\n        throw error;\n    }\n};\n\nexport const getCharacters = async (): Promise<Character[]> => {\n    const response = await fetch(`${API_URL}/characters`, {\n        headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to fetch characters');\n    return response.json();\n};\n\nexport const selectCharacter = async (characterId: number): Promise<void> => {\n    const response = await fetch(`${API_URL}/characters/${characterId}/select`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to select character');\n};\n\nexport const fetchChatHistory = async (\n    characterId?: number,\n    limit: number = 50,\n    offset: number = 0\n): Promise<ChatHistoryMessage[]> => {\n    const user = getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n\n    try {\n        let url = `${API_URL}/messages/me?limit=${limit}&offset=${offset}`;\n        if (characterId) {\n            url += `&character_id=${characterId}`;\n        }\n        const response = await axios.get(url, { headers: getAuthHeaders() });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat history:', error);\n        throw error;\n    }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}