{"ast":null,"code":"import axios from 'axios';\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const fetchChatMessages = async chatId => {\n  try {\n    const userId = 1; // TODO: Get from auth context\n    const response = await axios.get(`${API_URL}/messages/${userId}/${parseInt(chatId)}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat messages:', error);\n    throw error;\n  }\n};\n\n// Helper function to group messages by chat session\nexport const groupMessagesByChat = messages => {\n  const groupedMessages = messages.reduce((acc, message) => {\n    const key = message.chat_id || message.id.toString();\n    if (!acc[key]) {\n      acc[key] = {\n        id: key,\n        messages: [],\n        timestamp: message.timestamp\n      };\n    }\n    acc[key].messages.push(message);\n    return acc;\n  }, {});\n  return Object.values(groupedMessages).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n};\nexport const fetchCharacters = async () => {\n  try {\n    const response = await fetch(`${API_URL}/characters`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching characters:', error);\n    throw new Error('Failed to fetch characters');\n  }\n};\nexport const sendMessage = async message => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, {\n      ...message,\n      user_id: message.user_id || 1 // Default to user_id 1 if not provided\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\nexport const streamMessage = async (message, onMessage) => {\n  let retryCount = 0;\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY = 1000;\n  let messageBuffer = '';\n  let lastChunkTime = Date.now();\n  const CHUNK_TIMEOUT = 10000;\n  const connect = () => {\n    const params = new URLSearchParams({\n      message: message.message,\n      user_id: (message.user_id || 1).toString(),\n      ...(message.character_id && {\n        character_id: message.character_id.toString()\n      })\n    });\n    const eventSource = new EventSource(`${API_URL}/chat?${params}`);\n    eventSource.onmessage = event => {\n      try {\n        var _data$text;\n        const data = JSON.parse(event.data);\n        lastChunkTime = Date.now();\n        if (data.error) {\n          console.error('Stream error:', data.error);\n          eventSource.close();\n          onMessage({\n            text: '',\n            done: true,\n            error: data.error\n          });\n          return;\n        }\n        if ((_data$text = data.text) !== null && _data$text !== void 0 && _data$text.trim()) {\n          messageBuffer += data.text;\n          onMessage({\n            text: data.text,\n            done: false\n          });\n        }\n        if (data.done) {\n          eventSource.close();\n          if (messageBuffer.trim()) {\n            onMessage({\n              text: '',\n              done: true\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n        eventSource.close();\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Failed to parse response'\n        });\n      }\n    };\n    eventSource.onerror = async error => {\n      const currentTime = Date.now();\n      console.error('EventSource error:', error);\n      eventSource.close();\n      if (currentTime - lastChunkTime > CHUNK_TIMEOUT) {\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Response timeout. Please try again.'\n        });\n        return;\n      }\n      if (retryCount < MAX_RETRIES) {\n        retryCount++;\n        console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        connect();\n      } else {\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Connection failed after multiple attempts.'\n        });\n      }\n    };\n    return () => {\n      eventSource.close();\n    };\n  };\n  return connect();\n};\nexport const createCharacter = async character => {\n  try {\n    const response = await fetch(`${API_URL}/characters`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(character)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating character:', error);\n    throw error;\n  }\n};\nexport const updateCharacter = async (id, character) => {\n  try {\n    const response = await fetch(`${API_URL}/characters/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(character)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating character:', error);\n    throw error;\n  }\n};\nexport const deleteCharacter = async id => {\n  try {\n    const response = await fetch(`${API_URL}/characters/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.error('Error deleting character:', error);\n    throw error;\n  }\n};\nexport const getCharacters = async () => {\n  const response = await fetch(`${API_URL}/characters`, {\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) throw new Error('Failed to fetch characters');\n  return response.json();\n};\nexport const selectCharacter = async characterId => {\n  const response = await fetch(`${API_URL}/characters/${characterId}/select`, {\n    method: 'POST',\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) throw new Error('Failed to select character');\n};\nexport const fetchChatHistory = async (userId = 1, characterId, limit = 50, offset = 0) => {\n  try {\n    let url = `${API_URL}/messages/${userId}?limit=${limit}&offset=${offset}`;\n    if (characterId) {\n      url += `&character_id=${characterId}`;\n    }\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n    throw error;\n  }\n};\nfunction getAuthHeaders() {\n  // For now, return basic headers with content-type\n  // TODO: Add actual authentication token when auth system is implemented\n  return {\n    'Content-Type': 'application/json'\n  };\n}","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","fetchChatMessages","chatId","userId","response","get","parseInt","data","error","console","groupMessagesByChat","messages","groupedMessages","reduce","acc","message","key","chat_id","id","toString","timestamp","push","Object","values","sort","a","b","Date","getTime","fetchCharacters","fetch","ok","Error","status","json","sendMessage","post","user_id","streamMessage","onMessage","retryCount","MAX_RETRIES","RETRY_DELAY","messageBuffer","lastChunkTime","now","CHUNK_TIMEOUT","connect","params","URLSearchParams","character_id","eventSource","EventSource","onmessage","event","_data$text","JSON","parse","close","text","done","trim","onerror","currentTime","log","Promise","resolve","setTimeout","createCharacter","character","method","headers","body","stringify","errorData","detail","updateCharacter","deleteCharacter","getCharacters","getAuthHeaders","selectCharacter","characterId","fetchChatHistory","limit","offset","url"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport interface ChatMessage {\n    message: string;\n    character_id?: number;\n    user_id: number;\n    chat_id?: string;\n    timestamp: string;\n}\n\nexport interface ChatResponse {\n    response: string;\n}\n\nexport interface Character {\n    id: number;\n    name: string;\n    movie: string;\n    chat_style: string;\n    example_responses: string[];\n    created_at: string;\n    updated_at?: string;\n}\n\nexport interface StreamResponse {\n    text?: string;\n    done: boolean;\n    error?: string;\n}\n\nexport interface ChatHistoryMessage {\n    id: number;\n    message: string;\n    user_id: number;\n    character_id?: number;\n    is_bot: boolean;\n    timestamp: string;\n    last_message?: string; // Added this field\n}\n\nexport interface GroupedChatMessage {\n    id: string;\n    messages: ChatHistoryMessage[];\n    timestamp: string;\n    character?: Character;\n}\n\nexport const fetchChatMessages = async (chatId: string): Promise<ChatHistoryMessage[]> => {\n    try {\n        const userId = 1; // TODO: Get from auth context\n        const response = await axios.get(`${API_URL}/messages/${userId}/${parseInt(chatId)}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat messages:', error);\n        throw error;\n    }\n};\n\n// Helper function to group messages by chat session\nexport const groupMessagesByChat = (messages: ChatHistoryMessage[]): GroupedChatMessage[] => {\n    const groupedMessages = messages.reduce((acc, message) => {\n        const key = message.chat_id || message.id.toString();\n        if (!acc[key]) {\n            acc[key] = {\n                id: key,\n                messages: [],\n                timestamp: message.timestamp,\n            };\n        }\n        acc[key].messages.push(message);\n        return acc;\n    }, {} as Record<string, GroupedChatMessage>);\n\n    return Object.values(groupedMessages).sort(\n        (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n};\n\nexport const fetchCharacters = async (): Promise<Character[]> => {\n    try {\n        const response = await fetch(`${API_URL}/characters`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching characters:', error);\n        throw new Error('Failed to fetch characters');\n    }\n};\n\nexport const sendMessage = async (message: ChatMessage): Promise<ChatResponse> => {\n    try {\n        const response = await axios.post(`${API_URL}/chat`, {\n            ...message,\n            user_id: message.user_id || 1  // Default to user_id 1 if not provided\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error sending message:', error);\n        throw error;\n    }\n};\n\nexport const streamMessage = async (\n    message: ChatMessage,\n    onMessage: (data: StreamResponse) => void\n) => {\n    let retryCount = 0;\n    const MAX_RETRIES = 3;\n    const RETRY_DELAY = 1000;\n    let messageBuffer = '';\n    let lastChunkTime = Date.now();\n    const CHUNK_TIMEOUT = 10000;\n\n    const connect = () => {\n        const params = new URLSearchParams({\n            message: message.message,\n            user_id: (message.user_id || 1).toString(),\n            ...(message.character_id && { character_id: message.character_id.toString() })\n        });\n\n        const eventSource = new EventSource(`${API_URL}/chat?${params}`);\n\n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data) as StreamResponse;\n                lastChunkTime = Date.now();\n                \n                if (data.error) {\n                    console.error('Stream error:', data.error);\n                    eventSource.close();\n                    onMessage({ text: '', done: true, error: data.error });\n                    return;\n                }\n\n                if (data.text?.trim()) {\n                    messageBuffer += data.text;\n                    onMessage({ text: data.text, done: false });\n                }\n                \n                if (data.done) {\n                    eventSource.close();\n                    if (messageBuffer.trim()) {\n                        onMessage({ text: '', done: true });\n                    }\n                }\n            } catch (error) {\n                console.error('Error parsing message:', error);\n                eventSource.close();\n                onMessage({ text: '', done: true, error: 'Failed to parse response' });\n            }\n        };\n\n        eventSource.onerror = async (error) => {\n            const currentTime = Date.now();\n            console.error('EventSource error:', error);\n            eventSource.close();\n            \n            if (currentTime - lastChunkTime > CHUNK_TIMEOUT) {\n                onMessage({ text: '', done: true, error: 'Response timeout. Please try again.' });\n                return;\n            }\n            \n            if (retryCount < MAX_RETRIES) {\n                retryCount++;\n                console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n                connect();\n            } else {\n                onMessage({ text: '', done: true, error: 'Connection failed after multiple attempts.' });\n            }\n        };\n\n        return () => {\n            eventSource.close();\n        };\n    };\n\n    return connect();\n};\n\nexport const createCharacter = async (character: Omit<Character, 'id' | 'created_at' | 'updated_at'>): Promise<Character> => {\n    try {\n        const response = await fetch(`${API_URL}/characters`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(character),\n        });\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n        }\n        \n        return await response.json();\n    } catch (error) {\n        console.error('Error creating character:', error);\n        throw error;\n    }\n};\n\nexport const updateCharacter = async (id: number, character: Partial<Character>): Promise<Character> => {\n    try {\n        const response = await fetch(`${API_URL}/characters/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(character),\n        });\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n        }\n        \n        return await response.json();\n    } catch (error) {\n        console.error('Error updating character:', error);\n        throw error;\n    }\n};\n\nexport const deleteCharacter = async (id: number): Promise<void> => {\n    try {\n        const response = await fetch(`${API_URL}/characters/${id}`, {\n            method: 'DELETE',\n        });\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error deleting character:', error);\n        throw error;\n    }\n};\n\nexport const getCharacters = async (): Promise<Character[]> => {\n    const response = await fetch(`${API_URL}/characters`, {\n        headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to fetch characters');\n    return response.json();\n};\n\nexport const selectCharacter = async (characterId: number): Promise<void> => {\n    const response = await fetch(`${API_URL}/characters/${characterId}/select`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Failed to select character');\n};\n\nexport const fetchChatHistory = async (\n    userId: number = 1,\n    characterId?: number,\n    limit: number = 50,\n    offset: number = 0\n): Promise<ChatHistoryMessage[]> => {\n    try {\n        let url = `${API_URL}/messages/${userId}?limit=${limit}&offset=${offset}`;\n        if (characterId) {\n            url += `&character_id=${characterId}`;\n        }\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat history:', error);\n        throw error;\n    }\n};\n\nfunction getAuthHeaders(): HeadersInit {\n    // For now, return basic headers with content-type\n    // TODO: Add actual authentication token when auth system is implemented\n    return {\n        'Content-Type': 'application/json',\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}