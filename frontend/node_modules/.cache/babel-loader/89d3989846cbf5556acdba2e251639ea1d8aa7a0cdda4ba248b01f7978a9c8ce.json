{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\nexport const fetchChatMessages = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/chat/messages`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat messages:', error);\n    throw error;\n  }\n};\nexport const fetchCharacters = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/characters`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching characters:', error);\n    throw error;\n  }\n};\nexport const sendMessage = async message => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, message);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\nexport const streamMessage = (message, onMessage) => {\n  let retryCount = 0;\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY = 1000; // 1 second\n\n  const connect = () => {\n    const eventSource = new EventSource(`${API_URL}/chat?${new URLSearchParams({\n      message: message.message,\n      ...(message.character_id && {\n        character_id: message.character_id.toString()\n      })\n    })}`);\n    eventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        onMessage(data);\n        if (data.done || data.error) {\n          eventSource.close();\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n        eventSource.close();\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Failed to parse response'\n        });\n      }\n    };\n    eventSource.onerror = async error => {\n      console.error('EventSource error:', error);\n      eventSource.close();\n      if (retryCount < MAX_RETRIES) {\n        retryCount++;\n        console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        connect();\n      } else {\n        onMessage({\n          text: '',\n          done: true,\n          error: 'Connection failed after multiple attempts. Please try again.'\n        });\n      }\n    };\n    return () => {\n      eventSource.close();\n    };\n  };\n  return connect();\n};","map":{"version":3,"names":["axios","API_URL","fetchChatMessages","response","get","data","error","console","fetchCharacters","sendMessage","message","post","streamMessage","onMessage","retryCount","MAX_RETRIES","RETRY_DELAY","connect","eventSource","EventSource","URLSearchParams","character_id","toString","onmessage","event","JSON","parse","done","close","text","onerror","log","Promise","resolve","setTimeout"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000';\n\ninterface ChatMessage {\n    message: string;\n    character_id?: number;\n}\n\ninterface ChatResponse {\n    response: string;\n}\n\ninterface Character {\n    id: number;\n    name: string;\n    movie: string;\n    chat_style: string;\n    example_responses: string[];\n}\n\nexport interface StreamResponse {\n    text: string;\n    done: boolean;\n    error?: string;\n}\n\nexport const fetchChatMessages = async () => {\n    try {\n        const response = await axios.get(`${API_URL}/chat/messages`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat messages:', error);\n        throw error;\n    }\n};\n\nexport const fetchCharacters = async (): Promise<Character[]> => {\n    try {\n        const response = await axios.get(`${API_URL}/characters`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching characters:', error);\n        throw error;\n    }\n};\n\nexport const sendMessage = async (message: ChatMessage): Promise<ChatResponse> => {\n    try {\n        const response = await axios.post(`${API_URL}/chat`, message);\n        return response.data;\n    } catch (error) {\n        console.error('Error sending message:', error);\n        throw error;\n    }\n};\n\nexport const streamMessage = (message: ChatMessage, onMessage: (data: StreamResponse) => void) => {\n    let retryCount = 0;\n    const MAX_RETRIES = 3;\n    const RETRY_DELAY = 1000; // 1 second\n\n    const connect = () => {\n        const eventSource = new EventSource(\n            `${API_URL}/chat?${new URLSearchParams({\n                message: message.message,\n                ...(message.character_id && { character_id: message.character_id.toString() })\n            })}`\n        );\n\n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data) as StreamResponse;\n                onMessage(data);\n                \n                if (data.done || data.error) {\n                    eventSource.close();\n                }\n            } catch (error) {\n                console.error('Error parsing message:', error);\n                eventSource.close();\n                onMessage({ text: '', done: true, error: 'Failed to parse response' });\n            }\n        };\n\n        eventSource.onerror = async (error) => {\n            console.error('EventSource error:', error);\n            eventSource.close();\n            \n            if (retryCount < MAX_RETRIES) {\n                retryCount++;\n                console.log(`Retrying connection (${retryCount}/${MAX_RETRIES})...`);\n                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n                connect();\n            } else {\n                onMessage({ \n                    text: '', \n                    done: true, \n                    error: 'Connection failed after multiple attempts. Please try again.' \n                });\n            }\n        };\n\n        return () => {\n            eventSource.close();\n        };\n    };\n\n    return connect();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}