{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\nexport const fetchChatMessages = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/chat/messages`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat messages:', error);\n    throw error;\n  }\n};\nexport const fetchCharacters = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/characters`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching characters:', error);\n    throw error;\n  }\n};\nexport const sendMessage = async message => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, message);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\nexport const streamMessage = (message, onMessage) => {\n  const eventSource = new EventSource(`${API_URL}/chat?message=${encodeURIComponent(message.message)}${message.character_id ? `&character_id=${message.character_id}` : ''}`);\n  eventSource.onmessage = event => {\n    const data = JSON.parse(event.data);\n    onMessage(data);\n    if (data.done || data.error) {\n      eventSource.close();\n    }\n  };\n  eventSource.onerror = error => {\n    console.error('EventSource error:', error);\n    eventSource.close();\n    onMessage({\n      text: '',\n      done: true,\n      error: 'Connection error'\n    });\n  };\n  return () => eventSource.close();\n};","map":{"version":3,"names":["axios","API_URL","fetchChatMessages","response","get","data","error","console","fetchCharacters","sendMessage","message","post","streamMessage","onMessage","eventSource","EventSource","encodeURIComponent","character_id","onmessage","event","JSON","parse","done","close","onerror","text"],"sources":["C:/Users/ajits/fastapi-react-chatbot/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000';\n\ninterface ChatMessage {\n    message: string;\n    character_id?: number;\n}\n\ninterface ChatResponse {\n    response: string;\n}\n\ninterface Character {\n    id: number;\n    name: string;\n    movie: string;\n    chat_style: string;\n    example_responses: string[];\n}\n\nexport interface StreamResponse {\n    text: string;\n    done: boolean;\n    error?: string;\n}\n\nexport const fetchChatMessages = async () => {\n    try {\n        const response = await axios.get(`${API_URL}/chat/messages`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chat messages:', error);\n        throw error;\n    }\n};\n\nexport const fetchCharacters = async (): Promise<Character[]> => {\n    try {\n        const response = await axios.get(`${API_URL}/characters`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching characters:', error);\n        throw error;\n    }\n};\n\nexport const sendMessage = async (message: ChatMessage): Promise<ChatResponse> => {\n    try {\n        const response = await axios.post(`${API_URL}/chat`, message);\n        return response.data;\n    } catch (error) {\n        console.error('Error sending message:', error);\n        throw error;\n    }\n};\n\nexport const streamMessage = (message: ChatMessage, onMessage: (data: StreamResponse) => void) => {\n    const eventSource = new EventSource(`${API_URL}/chat?message=${encodeURIComponent(message.message)}${message.character_id ? `&character_id=${message.character_id}` : ''}`);\n\n    eventSource.onmessage = (event) => {\n        const data = JSON.parse(event.data) as StreamResponse;\n        onMessage(data);\n        \n        if (data.done || data.error) {\n            eventSource.close();\n        }\n    };\n\n    eventSource.onerror = (error) => {\n        console.error('EventSource error:', error);\n        eventSource.close();\n        onMessage({ text: '', done: true, error: 'Connection error' });\n    };\n\n    return () => eventSource.close();\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAyBvC,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,gBAAgB,CAAC;IAC5D,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAkC;EAC7D,IAAI;IACA,MAAML,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,aAAa,CAAC;IACzD,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAOC,OAAoB,IAA4B;EAC9E,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACW,IAAI,CAAC,GAAGV,OAAO,OAAO,EAAES,OAAO,CAAC;IAC7D,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMM,aAAa,GAAGA,CAACF,OAAoB,EAAEG,SAAyC,KAAK;EAC9F,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,GAAGd,OAAO,iBAAiBe,kBAAkB,CAACN,OAAO,CAACA,OAAO,CAAC,GAAGA,OAAO,CAACO,YAAY,GAAG,iBAAiBP,OAAO,CAACO,YAAY,EAAE,GAAG,EAAE,EAAE,CAAC;EAE3KH,WAAW,CAACI,SAAS,GAAIC,KAAK,IAAK;IAC/B,MAAMd,IAAI,GAAGe,IAAI,CAACC,KAAK,CAACF,KAAK,CAACd,IAAI,CAAmB;IACrDQ,SAAS,CAACR,IAAI,CAAC;IAEf,IAAIA,IAAI,CAACiB,IAAI,IAAIjB,IAAI,CAACC,KAAK,EAAE;MACzBQ,WAAW,CAACS,KAAK,CAAC,CAAC;IACvB;EACJ,CAAC;EAEDT,WAAW,CAACU,OAAO,GAAIlB,KAAK,IAAK;IAC7BC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1CQ,WAAW,CAACS,KAAK,CAAC,CAAC;IACnBV,SAAS,CAAC;MAAEY,IAAI,EAAE,EAAE;MAAEH,IAAI,EAAE,IAAI;MAAEhB,KAAK,EAAE;IAAmB,CAAC,CAAC;EAClE,CAAC;EAED,OAAO,MAAMQ,WAAW,CAACS,KAAK,CAAC,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}